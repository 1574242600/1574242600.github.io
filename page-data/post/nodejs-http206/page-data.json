{"componentChunkName":"component---node-modules-gatsby-theme-yoshino-src-templates-post-jsx","path":"/post/nodejs-http206/","result":{"data":{"markdownRemark":{"frontmatter":{"date":"2020-04-10T12:40:00.000Z","tags":["js"],"title":"[nodejs]koa框架 206 Partial Content","update":null},"timeToRead":2,"navHtml":"<ol class=\"nav\"><li class=\"nav-item nav-level-2\"><a class=\"nav-link\" href=\"#206-partial-content-是个什么玩意？\"><span class=\"nav-number\">1.</span> <span class=\"nav-text\">206 Partial Content 是个什么玩意？</span></a></li><li class=\"nav-item nav-level-2\"><a class=\"nav-link\" href=\"#头示例\"><span class=\"nav-number\">2.</span> <span class=\"nav-text\">头示例</span></a><ol class=\"nav-child\"><li class=\"nav-item nav-level-3\"><a class=\"nav-link\" href=\"#range-字节数（bytes）开始-结束\"><span class=\"nav-number\">2.1.</span> <span class=\"nav-text\">Range: 字节数（bytes）=(开始)-(结束)</span></a></li><li class=\"nav-item nav-level-3\"><a class=\"nav-link\" href=\"#content-range：字节数（bytes）开始-结束总长度\"><span class=\"nav-number\">2.2.</span> <span class=\"nav-text\">Content-Range：字节数（bytes）=(开始)-(结束)/(总长度)</span></a></li><li class=\"nav-item nav-level-3\"><a class=\"nav-link\" href=\"#accept-ranges-字节（bytes）\"><span class=\"nav-number\">2.3.</span> <span class=\"nav-text\">Accept-Ranges: 字节（bytes）</span></a></li><li class=\"nav-item nav-level-3\"><a class=\"nav-link\" href=\"#content-length-3145729\"><span class=\"nav-number\">2.4.</span> <span class=\"nav-text\">Content-Length: 3145729</span></a></li></ol></li><li class=\"nav-item nav-level-2\"><a class=\"nav-link\" href=\"#koa-实现部分功能\"><span class=\"nav-number\">3.</span> <span class=\"nav-text\">koa 实现部分功能</span></a></li></ol>","excerpt":"c，为什么koa它不直接支持206","html":"<p>c，为什么koa它不直接支持206  </p>\n<!--more-->\n\n              <h2 id=\"206-partial-content-是个什么玩意？\">\n                206 Partial Content 是个什么玩意？\n              </h2><blockquote>\n<p>HTTP 206 Partial Content 成功状态响应代码表示请求已成功，并且主体包含所请求的数据区间，该数据区间是在请求的 Range 首部指定的。</p>\n<p>如果只包含一个数据区间，那么整个响应的 Content-Type 首部的值为所请求的文件的类型，同时包含  Content-Range 首部。</p>\n<p>如果包含多个数据区间，那么整个响应的  Content-Type  首部的值为 multipart/byteranges ，其中一个片段对应一个数据区间，并提供  Content-&gt; Range 和 Content-Type  描述信息。</p>\n<p> <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/206\">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/206</a></p>\n</blockquote>\n<p>简单来说，就是获取服务端上，一个文件的部分内容，HTTP断点续传就是依赖的这玩意<br>注：本文并未实现  206 Partial Content的全部功能</p>\n\n              <h2 id=\"头示例\">\n                头示例\n              </h2><pre><code>GET /localVideo/?token=14c422b3623a69dbc831c4469794e7a2 HTTP/1.1\nHost: 127.0.0.1:3000\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0\nAccept: video/webm,video/ogg,video/*;q=0.9,application/ogg;q=0.7,audio/*;q=0.6,*/*;q=0.5\nRange: bytes=0-\nConnection: keep-alive\n</code></pre>\n\n              <h3 id=\"range-字节数（bytes）开始-结束\">\n                Range: 字节数（bytes）=(开始)-(结束)\n              </h3><p>这是浏览器告知服务器所需分部分内容范围的消息头。 注意开始和结束位置是都包括在内的，这个头也只发送一个位置，其含义如下:  </p>\n<ul>\n<li>如果只发送开始位置，服务器会返回从声明的开始位置到服务器设置的数据区间长度+开始位置的数据  </li>\n<li>如果只发送结束位置，结束位置参数可以被描述成从最后一个可用的字节算起可以被服务器返回的字节数  </li>\n</ul>\n<pre><code>HTTP/1.1 206 Partial Content\nContent-Type: video/mp4\nContent-Range: bytes 0-3145729/24332262\nAccept-Ranges: bytes\nContent-Length: 3145729\nConnection: keep-alive\n</code></pre>\n\n              <h3 id=\"content-range：字节数（bytes）开始-结束总长度\">\n                Content-Range：字节数（bytes）=(开始)-(结束)/(总长度)\n              </h3><p>服务器返回当前数据区间开始结束位置，文件总长度</p>\n\n              <h3 id=\"accept-ranges-字节（bytes）\">\n                Accept-Ranges: 字节（bytes）\n              </h3><p>声明数据存储单位 ，然而只能用bytes这一个单位</p>\n\n              <h3 id=\"content-length-3145729\">\n                Content-Length: 3145729\n              </h3><p>此次数据长度</p>\n\n              <h2 id=\"koa-实现部分功能\">\n                koa 实现部分功能\n              </h2><pre><code class=\"language-js\"><span class=\"token doc-comment comment\">/**\n * 206 Partial Content\n * <span class=\"token keyword\">@name</span> http206\n * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">ctx</span>  object Koa Context\n * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">path</span>  string 文件路径\n * <span class=\"token keyword\">@return</span> steam\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">http206</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span>path</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token maybe-class-name\">Range</span> <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">request</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Range'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> file <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">statSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> fileSize <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token property-access\">size</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> parts <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">Range</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">bytes=</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> start <span class=\"token operator\">=</span> parts<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span>parts<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//当请求字段Range结束位置为0时，这里长度为3mb,请根据需要调整</span>\n    <span class=\"token keyword\">let</span> end <span class=\"token operator\">=</span> parts<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span>parts<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> start <span class=\"token operator\">+</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>  \n    end <span class=\"token operator\">=</span> end <span class=\"token operator\">></span> fileSize <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> fileSize <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> end<span class=\"token punctuation\">;</span>           <span class=\"token comment\">//当结束位置大于文件长度-1时，结束位置 = 文件长度 - 1</span>\n    <span class=\"token keyword\">let</span> chunksize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'Content-Range'</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">bytes </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>start<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>end<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>fileSize<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'Accept-Ranges'</span><span class=\"token operator\">:</span> <span class=\"token string\">'bytes'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'Content-Length'</span><span class=\"token operator\">:</span> chunksize<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'Content-Type'</span><span class=\"token operator\">:</span>  mime类型<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//console.log(headers);</span>\n    ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">response</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">status</span> <span class=\"token operator\">=</span> <span class=\"token number\">206</span><span class=\"token punctuation\">;</span>\n    ctx<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>headers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//请根据需要处理异常</span>\n    <span class=\"token keyword control-flow\">return</span> fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createReadStream</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>start<span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img class=\"lazyload\" data-src=\"https://nworm.icu/pan/%E5%9B%BE%E7%89%87/http206.png\" alt=\"\"></p>\n"}},"pageContext":{"id":"622136ac-933a-5b0f-b7ec-2af057a1ed8c"}},"staticQueryHashes":["1528757306","3042919606","3159585216","3741834850","4209591199","847439237"]}
{"version":3,"sources":["webpack:///./node_modules/gatsby-theme-yoshino/src/components/global/style/postHead.module.css","webpack:///./node_modules/gatsby-theme-yoshino/src/templates/style/post.module.css","webpack:///./node_modules/gatsby-theme-yoshino/src/pages/about.jsx","webpack:///./node_modules/gatsby-theme-yoshino/src/components/global/postHead/style/postInfo.module.css","webpack:///./node_modules/gatsby-theme-yoshino/src/components/global/postHead/postInfo/time.jsx","webpack:///./node_modules/gatsby-theme-yoshino/src/components/global/postHead/postInfo.jsx","webpack:///./node_modules/gatsby-theme-yoshino/src/components/global/postHead.jsx","webpack:///./node_modules/gatsby-theme-yoshino/src/components/post/comment/disqus.js","webpack:///./node_modules/gatsby-theme-yoshino/src/components/post/comment.jsx"],"names":["module","exports","About","props","data","markdownRemark","frontmatter","excerpt","html","className","PostStyle","title","name","content","property","info","dangerouslySetInnerHTML","__html","postTitle","dateToString","date","time","Date","getFullYear","getMonth","getDate","Time","update","Fragment","path","dateTime","itemProp","PostInfo","timeToRead","tags","PostInfoStyle","map","tag","index","key","to","undefined","PostHead","PostHeadStyle","JSON","stringify","elementId","loadDisqusJs","siteId","errorCallback","a","d","document","s","createElement","src","async","onerror","setAttribute","head","body","appendChild","showError","getElementById","innerHTML","e","console","warn","reset","window","DISQUS","reload","config","page","url","location","href","identifier","pathname","load","disqus_config","this","accessDisqus","destroy","Comment","commentConfig","useStaticQuery","site","siteMetadata","comment","type","id","commentIndex","useEffect"],"mappings":"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","file":"component---node-modules-gatsby-theme-yoshino-src-pages-about-jsx-7c0f6508e7b733f8f191.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"postHead-module--title--3fWEH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postCard\":\"post-module--post-card--3ARqb\",\"post\":\"post-module--post--1-c9o\",\"comment\":\"post-module--comment--3SSEI\"};","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as PostStyle from \"../templates/style/post.module.css\";\r\nimport PostHead from \"components/global/postHead\";\r\nimport Comment from \"components/post/comment\";\r\nimport Seo from \"components/global/seo\";\r\nimport { graphql } from \"gatsby\";\r\n\r\nexport default function About(props) {\r\n    if (props.data.markdownRemark === null) { return \"error: no found about.md\"; }\r\n\r\n    const {\r\n        markdownRemark: {\r\n            frontmatter,\r\n            excerpt,\r\n            html\r\n        }\r\n    } = props.data;\r\n\r\n    return (\r\n        <div className={ PostStyle.postCard }>\r\n            <Seo title={ frontmatter.title } >\r\n                <meta name=\"description\" content={ excerpt } />\r\n                <meta property=\"og:type\" content=\"article\" />\r\n                <meta property=\"og:description\" content={ excerpt } />\r\n            </Seo>\r\n\r\n            <div className={ PostStyle.post }>\r\n                <PostHead info={ frontmatter } />\r\n                <div className={ \"post-body\" } dangerouslySetInnerHTML={ { __html: html } }></div>\r\n            </div>\r\n\r\n            <div className={ PostStyle.comment }>\r\n                <Comment postTitle={ frontmatter.title } />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nAbout.propTypes = {\r\n    data: PropTypes.object\r\n};\r\n\r\nexport const query = graphql`\r\n    query aboutQuery {\r\n        markdownRemark(fileAbsolutePath: {regex: \"/(?<=about)\\\\.md$/\"}) {\r\n            frontmatter { \r\n                title\r\n            }\r\n            excerpt\r\n            html\r\n        }\r\n    }\r\n`;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postInfo\":\"postInfo-module--post-info--M_SKV\"};","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Icon from \"../../icon\";\r\n\r\nfunction dateToString(date) {\r\n    const time = new Date( date );\r\n    const y = time.getFullYear();\r\n    const m = time.getMonth() + 1;\r\n    const d = time.getDate();\r\n    return `${y}-${m}-${d}`;\r\n}\r\n\r\nexport default function Time(props) {\r\n    const { date, update } = props.time;\r\n    return (\r\n        <React.Fragment>\r\n            <span>\r\n                <Icon path={\"/md/today\"} />{\" 发表于 \"}\r\n                <time dateTime={ date } itemProp=\"dateCreated datePublished\">{ dateToString(date) }</time>\r\n            </span>|\r\n\r\n            {update && \r\n                <span>\r\n                    <Icon path={\"/md/update\"} />{\" 更新于 \"}\r\n                    <time dateTime={ update } itemProp=\"dateModified\">{ dateToString(update) }</time>\r\n                </span>\r\n            }\r\n\r\n            {update && \"|\"}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nTime.propTypes = {\r\n    time: PropTypes.shape({\r\n        date: PropTypes.string,\r\n        update: PropTypes.string\r\n    }) \r\n};","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"gatsby\";\r\nimport Time from \"./postInfo/time\";\r\nimport * as PostInfoStyle from \"./style/postInfo.module.css\";\r\n\r\nexport default function PostInfo(props) {\r\n\r\n    const { date, update, timeToRead, tags } = props.info;\r\n\r\n    function renderTagLinks() {\r\n        if (tags == null) { return \"null\"; }\r\n        return tags.map(\r\n            (tag, index) => (\r\n                <React.Fragment key={ tag }>\r\n                    <Link to={`/tag/${ tag }`}>{ tag }</Link> \r\n                    { tags[index + 1] === undefined ? \"\" : \", \" }\r\n                </React.Fragment>\r\n            )\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className={ PostInfoStyle.postInfo }>\r\n            <Time time={ { date, update } } />\r\n            <span>{ `预计阅读时长: ${timeToRead} 分钟` }</span>\r\n            |<span>{ \"标签: \" } { renderTagLinks() }</span>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nPostInfo.propTypes = {\r\n    info: PropTypes.shape({\r\n        date: PropTypes.string.isRequired,\r\n        update: PropTypes.string,\r\n        timeToRead: PropTypes.number.isRequired,\r\n        tags: PropTypes.arrayOf(PropTypes.string),\r\n    })\r\n};","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as PostHeadStyle from \"./style/postHead.module.css\";\r\nimport PostInfo from \"./postHead/postInfo\";\r\n\r\nexport default function PostHead(props) {\r\n    const { title, ...info } = props.info;\r\n\r\n    return (\r\n        <div>\r\n            <h2 className={ PostHeadStyle.title } >{ title }</h2>\r\n            { JSON.stringify(info) !== \"{}\"  && <PostInfo info={ info } />}\r\n        </div>\r\n    );\r\n}\r\n\r\nPostHead.propTypes = {\r\n    info: PropTypes.shape({\r\n        title: PropTypes.string.isRequired,\r\n        date: PropTypes.string,\r\n        update: PropTypes.string,\r\n        timeToRead: PropTypes.number,\r\n        tags: PropTypes.arrayOf(PropTypes.string),\r\n    })\r\n};","export const elementId = \"disqus_thread\";\n\nasync function loadDisqusJs(siteId, errorCallback) {\n    const d = document, s = d.createElement(\"script\");\n    s.src = `//${siteId}.disqus.com/embed.js`;\n    s.async = true;\n    s.onerror = errorCallback;\n    s.setAttribute(\"data-timestamp\", + new Date());\n    (d.head || d.body).appendChild(s);\n}\n\nasync function showError() {\n    try {\n        const disqusDom = document.getElementById(elementId);\n        disqusDom.innerHTML = \"Disqus加载失败, 请检查您的地区是否支持Disqus\";\n    } catch (e) {\n        console.warn(e);\n    }\n}\n\nfunction reset(title) {\n    document.getElementById(elementId).innerHTML = \"\";\n\n    window.DISQUS.reset({\n        reload: true,\n        config: () => {\n            this.page.url = window.location.href;\n            this.page.identifier = window.location.pathname;\n            this.page.title = title;\n        }\n    });\n}\n\nexport async function load(siteId, title) {\n\n    window.disqus_config = function () {\n        this.page.url = window.location.href;\n        this.page.identifier = window.location.pathname;\n        this.page.title = title;\n    };\n\n    if (window.DISQUS === undefined) {\n        window.accessDisqus = true;\n        loadDisqusJs(siteId, (e) => {\n            showError();\n            window.DISQUS = false;\n            window.accessDisqus = false;\n            console.warn(e);\n        });\n    } else {\n\n        if (!window.accessDisqus) {\n            showError();\n            return false;\n        }\n\n        reset(title);\n\n    }\n}\n\nexport function destroy() { }\n\n","import React, { useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useStaticQuery, graphql } from \"gatsby\";\r\nimport * as commentIndex from \"./comment/index\";\r\n\r\nexport default function Comment(props) {\r\n    const { site: { siteMetadata: { comment: commentConfig } } } = useStaticQuery(\r\n        graphql`\r\n            query {\r\n                site {\r\n                    siteMetadata {\r\n                        comment {\r\n                            type\r\n                            id\r\n                        }\r\n                    }\r\n                }\r\n            }`\r\n    );\r\n\r\n    const { postTitle } = props;\r\n    const { type, id: siteId } = commentConfig;\r\n    const comment = commentIndex[type];\r\n    if ( comment === undefined ) { return `error: no found ${type}`;}\r\n    \r\n    useEffect(() => {\r\n        comment.load(siteId, postTitle);\r\n        return comment.destroy;\r\n    }, []);\r\n\r\n    return (\r\n        <div id={comment.elementId}>\r\n            <div> loading...</div>\r\n        </div>\r\n    ); \r\n}\r\n\r\nComment.propTypes = { \r\n    postTitle: PropTypes.string\r\n};\r\n"],"sourceRoot":""}
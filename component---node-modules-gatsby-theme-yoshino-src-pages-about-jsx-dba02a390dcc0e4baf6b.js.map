{"version":3,"sources":["webpack:///./node_modules/gatsby-theme-yoshino/src/components/global/style/postHead.module.css","webpack:///./node_modules/gatsby-theme-yoshino/src/templates/style/post.module.css","webpack:///./node_modules/gatsby-theme-yoshino/src/pages/about.jsx","webpack:///./node_modules/gatsby-theme-yoshino/src/components/global/postHead/style/postInfo.module.css","webpack:///./node_modules/gatsby-theme-yoshino/src/components/global/postHead/postInfo/time.jsx","webpack:///./node_modules/gatsby-theme-yoshino/src/components/global/postHead/postInfo.jsx","webpack:///./node_modules/gatsby-theme-yoshino/src/components/global/postHead.jsx","webpack:///./node_modules/gatsby-theme-yoshino/src/components/post/comment/disqus.js","webpack:///./node_modules/gatsby-theme-yoshino/src/components/post/comment.jsx"],"names":["module","exports","About","props","data","markdownRemark","frontmatter","excerpt","html","className","PostStyle","postCard","title","name","content","property","post","info","dangerouslySetInnerHTML","__html","addTitleId","addLazyLoadImg","comment","postTitle","dateToString","date","time","Date","getFullYear","getMonth","getDate","Time","update","Fragment","src","dateTime","itemProp","PostInfo","url","useStaticQuery","site","siteMetadata","timeToRead","tags","PostInfoStyle","postInfo","map","tag","index","key","to","undefined","PostHead","PostHeadStyle","JSON","stringify","elementId","loadDisqusJs","siteId","errorCallback","a","d","document","s","createElement","async","onerror","setAttribute","head","body","appendChild","showError","getElementById","innerHTML","e","console","warn","reset","window","DISQUS","reload","config","page","location","href","identifier","pathname","load","disqus_config","this","accessDisqus","destroy","Comment","commentConfig","type","id","commentIndex","useEffect"],"mappings":"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","file":"component---node-modules-gatsby-theme-yoshino-src-pages-about-jsx-dba02a390dcc0e4baf6b.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"postHead-module--title--3fWEH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postCard\":\"post-module--post-card--3ARqb\",\"post\":\"post-module--post--1-c9o\",\"comment\":\"post-module--comment--3SSEI\"};","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport PostStyle from \"../templates/style/post.module.css\";\r\nimport PostHead from \"components/global/postHead\";\r\nimport Comment from \"components/post/comment\";\r\nimport Seo from \"components/global/seo\";\r\nimport { addLazyLoadImg, addTitleId } from \"../global\";\r\nimport { graphql } from \"gatsby\";\r\n\r\nexport default function About(props) {\r\n    if (props.data.markdownRemark === null) { return \"error: no found about.md\"; }\r\n\r\n    const {\r\n        markdownRemark: {\r\n            frontmatter,\r\n            excerpt,\r\n            html\r\n        }\r\n    } = props.data;\r\n\r\n    return (\r\n        <div className={ PostStyle.postCard }>\r\n            <Seo title={ frontmatter.title } >\r\n                <meta name=\"description\" content={ excerpt } />\r\n                <meta property=\"og:type\" content=\"article\" />\r\n                <meta property=\"og:description\" content={ excerpt } />\r\n            </Seo>\r\n\r\n            <div className={ PostStyle.post }>\r\n                <PostHead info={ frontmatter } />\r\n                <div className={ \"post-body\" } dangerouslySetInnerHTML={ { __html: addTitleId(addLazyLoadImg(html)) } }></div>\r\n            </div>\r\n\r\n            <div className={ PostStyle.comment }>\r\n                <Comment postTitle={ frontmatter.title } />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nAbout.propTypes = {\r\n    data: PropTypes.object\r\n};\r\n\r\nexport const query = graphql`\r\n    query aboutQuery {\r\n        markdownRemark(fileAbsolutePath: {regex: \"/(?<=about)\\\\\\\\.md$/\"}) {\r\n            frontmatter { \r\n                title\r\n            }\r\n            excerpt\r\n            html\r\n        }\r\n    }\r\n`;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postInfo\":\"postInfo-module--post-info--M_SKV\"};","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Icon from \"../../icon\";\r\n\r\nfunction dateToString(date) {\r\n    const time = new Date( date );\r\n    const y = time.getFullYear();\r\n    const m = time.getMonth() + 1;\r\n    const d = time.getDate();\r\n    return `${y}-${m}-${d}`;\r\n}\r\n\r\nexport default function Time(props) {\r\n    const { date, update } = props.time;\r\n    return (\r\n        <React.Fragment>\r\n            <span>\r\n                <Icon src='/md/today' />{\" 发表于 \"}\r\n                <time dateTime={ date } itemProp=\"dateCreated datePublished\">{ dateToString(date) }</time>\r\n            </span>|\r\n\r\n            {update && \r\n                <span>\r\n                    <Icon src='/md/update' />{\" 更新于 \"}\r\n                    <time dateTime={ update } itemProp=\"dateModified\">{ dateToString(update) }</time>\r\n                </span>\r\n            }\r\n\r\n            {update && \"|\"}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nTime.propTypes = {\r\n    time: PropTypes.shape({\r\n        date: PropTypes.string,\r\n        update: PropTypes.string\r\n    }) \r\n};","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link, useStaticQuery, graphql } from \"gatsby\";\r\nimport Time from \"./postInfo/time\";\r\nimport PostInfoStyle from \"./style/postInfo.module.css\";\r\n\r\nexport default function PostInfo(props) {\r\n    const { site: { siteMetadata: { url } } } = useStaticQuery(\r\n        graphql`\r\n            query {\r\n                site {\r\n                    siteMetadata {\r\n                        url\r\n                    }\r\n                }\r\n            }`\r\n    );\r\n\r\n    const { date, update, timeToRead, tags } = props.info;\r\n\r\n    function renderTagLinks() {\r\n        if (tags == null) { return \"null\"; }\r\n        return tags.map(\r\n            (tag, index) => (\r\n                <React.Fragment key={ tag }>\r\n                    <Link to={`${ url }/tag/${ tag }`}>{ tag }</Link> \r\n                    { tags[index + 1] === undefined ? \"\" : \", \" }\r\n                </React.Fragment>\r\n            )\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className={ PostInfoStyle.postInfo }>\r\n            <Time time={ { date, update } } />\r\n            <span>{ `预计阅读时长: ${timeToRead} 分钟` }</span>\r\n            |<span>{ \"标签: \" } { renderTagLinks() }</span>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nPostInfo.propTypes = {\r\n    info: PropTypes.shape({\r\n        date: PropTypes.string.isRequired,\r\n        update: PropTypes.string,\r\n        timeToRead: PropTypes.number.isRequired,\r\n        tags: PropTypes.arrayOf(PropTypes.string),\r\n    })\r\n};","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport PostHeadStyle from \"./style/postHead.module.css\";\r\nimport PostInfo from \"./postHead/postInfo\";\r\n\r\nexport default function PostHead(props) {\r\n    const { title, ...info } = props.info;\r\n\r\n    return (\r\n        <div>\r\n            <h2 className={ PostHeadStyle.title } >{ title }</h2>\r\n            { JSON.stringify(info) !== \"{}\"  && <PostInfo info={ info } />}\r\n        </div>\r\n    );\r\n}\r\n\r\nPostHead.propTypes = {\r\n    info: PropTypes.shape({\r\n        title: PropTypes.string.isRequired,\r\n        date: PropTypes.string,\r\n        update: PropTypes.string,\r\n        timeToRead: PropTypes.number,\r\n        tags: PropTypes.arrayOf(PropTypes.string),\r\n    })\r\n};","export const elementId = \"disqus_thread\";\r\n\r\nasync function loadDisqusJs(siteId, errorCallback) {\r\n    const d = document, s = d.createElement(\"script\");\r\n    s.src = `//${siteId}.disqus.com/embed.js`;\r\n    s.async = true;\r\n    s.onerror = errorCallback;\r\n    s.setAttribute(\"data-timestamp\", + new Date());\r\n    (d.head || d.body).appendChild(s);\r\n}\r\n\r\nasync function showError() {\r\n    try {\r\n        const disqusDom = document.getElementById(elementId);\r\n        disqusDom.innerHTML = \"Disqus加载失败, 请检查您的地区是否支持Disqus\";\r\n    } catch (e) {\r\n        console.warn(e);\r\n    }\r\n}\r\n\r\nfunction reset(title) {\r\n    document.getElementById(elementId).innerHTML = \"\";\r\n\r\n    window.DISQUS.reset({\r\n        reload: true,\r\n        config: () => {\r\n            this.page.url = window.location.href;\r\n            this.page.identifier = window.location.pathname;\r\n            this.page.title = title;\r\n        }\r\n    });\r\n}\r\n\r\nexport async function load(siteId, title) {\r\n\r\n    window.disqus_config = function () {\r\n        this.page.url = window.location.href;\r\n        this.page.identifier = window.location.pathname;\r\n        this.page.title = title;\r\n    };\r\n\r\n    if (window.DISQUS === undefined) {\r\n        window.accessDisqus = true;\r\n        loadDisqusJs(siteId, (e) => {\r\n            showError();\r\n            window.DISQUS = false;\r\n            window.accessDisqus = false;\r\n            console.warn(e);\r\n        });\r\n    } else {\r\n\r\n        if (!window.accessDisqus) {\r\n            showError();\r\n            return false;\r\n        }\r\n\r\n        reset(title);\r\n\r\n    }\r\n}\r\n\r\nexport function destroy() { }\r\n\r\n","import React, { useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useStaticQuery, graphql } from \"gatsby\";\r\nimport * as commentIndex from \"./comment/index\";\r\n\r\nexport default function Comment(props) {\r\n    const { site: { siteMetadata: { comment: commentConfig } } } = useStaticQuery(\r\n        graphql`\r\n            query {\r\n                site {\r\n                    siteMetadata {\r\n                        comment {\r\n                            type\r\n                            id\r\n                        }\r\n                    }\r\n                }\r\n            }`\r\n    );\r\n\r\n    const { postTitle } = props;\r\n    const { type, id: siteId } = commentConfig;\r\n    const comment = commentIndex[type];\r\n    if ( comment === undefined ) { return `error: no found ${type}`;}\r\n    \r\n    useEffect(() => {\r\n        comment.load(siteId, postTitle);\r\n        return comment.destroy;\r\n    }, []);\r\n\r\n    return (\r\n        <div id={comment.elementId}>\r\n            <div> loading...</div>\r\n        </div>\r\n    ); \r\n}\r\n\r\nComment.propTypes = { \r\n    postTitle: PropTypes.string\r\n};\r\n"],"sourceRoot":""}